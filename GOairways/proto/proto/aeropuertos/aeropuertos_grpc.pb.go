// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.0
// source: aeropuertos.proto

package aeropuertos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AereopuertosService_GetRutas_FullMethodName = "/aeropuerto.AereopuertosService/GetRutas"
)

// AereopuertosServiceClient is the client API for AereopuertosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AereopuertosServiceClient interface {
	GetRutas(ctx context.Context, in *GetAereopuertosRequest, opts ...grpc.CallOption) (*GetAereopuertosResponse, error)
}

type aereopuertosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAereopuertosServiceClient(cc grpc.ClientConnInterface) AereopuertosServiceClient {
	return &aereopuertosServiceClient{cc}
}

func (c *aereopuertosServiceClient) GetRutas(ctx context.Context, in *GetAereopuertosRequest, opts ...grpc.CallOption) (*GetAereopuertosResponse, error) {
	out := new(GetAereopuertosResponse)
	err := c.cc.Invoke(ctx, AereopuertosService_GetRutas_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AereopuertosServiceServer is the server API for AereopuertosService service.
// All implementations must embed UnimplementedAereopuertosServiceServer
// for forward compatibility
type AereopuertosServiceServer interface {
	GetRutas(context.Context, *GetAereopuertosRequest) (*GetAereopuertosResponse, error)
	mustEmbedUnimplementedAereopuertosServiceServer()
}

// UnimplementedAereopuertosServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAereopuertosServiceServer struct {
}

func (UnimplementedAereopuertosServiceServer) GetRutas(context.Context, *GetAereopuertosRequest) (*GetAereopuertosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRutas not implemented")
}
func (UnimplementedAereopuertosServiceServer) mustEmbedUnimplementedAereopuertosServiceServer() {}

// UnsafeAereopuertosServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AereopuertosServiceServer will
// result in compilation errors.
type UnsafeAereopuertosServiceServer interface {
	mustEmbedUnimplementedAereopuertosServiceServer()
}

func RegisterAereopuertosServiceServer(s grpc.ServiceRegistrar, srv AereopuertosServiceServer) {
	s.RegisterService(&AereopuertosService_ServiceDesc, srv)
}

func _AereopuertosService_GetRutas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAereopuertosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AereopuertosServiceServer).GetRutas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AereopuertosService_GetRutas_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AereopuertosServiceServer).GetRutas(ctx, req.(*GetAereopuertosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AereopuertosService_ServiceDesc is the grpc.ServiceDesc for AereopuertosService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AereopuertosService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aeropuerto.AereopuertosService",
	HandlerType: (*AereopuertosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRutas",
			Handler:    _AereopuertosService_GetRutas_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "aeropuertos.proto",
}
